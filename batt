#!/bin/sh

# Initialize display flags
SHOW_WATTS=0
SHOW_PERCENTAGE=0
SHOW_TIME=0
SHOW_AMPS=0
SHOW_ALL=1

# Parse command line arguments
while [ $# -gt 0 ]; do
    case "$1" in
        -w|--watts)
            SHOW_WATTS=1
            SHOW_ALL=0
            ;;
        -p|--percentage)
            SHOW_PERCENTAGE=1
            SHOW_ALL=0
            ;;
        -t|--time)
            SHOW_TIME=1
            SHOW_ALL=0
            ;;
        -a|--amps)
            SHOW_AMPS=1
            SHOW_ALL=0
            ;;
        -h|--help)
            echo "Usage: batt [OPTIONS]"
            echo "Show battery information"
            echo ""
            echo "Options:"
            echo "  -w, --watts       Show only wattage information"
            echo "  -p, --percentage  Show only percentage information"
            echo "  -t, --time        Show only time remaining information"
            echo "  -a, --amps        Show only amperage information"
            echo "  -h, --help        Show this help message"
            echo ""
            echo "Without any options, shows all battery information"
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            echo "Use -h or --help for usage information" >&2
            exit 1
            ;;
    esac
    shift
done

# Detect OS
OS=$(uname -s)

# Check if terminal supports colors
if [ -t 1 ] && [ -n "$TERM" ] && [ "$TERM" != "dumb" ]; then
    RED=$(printf "\033[31m")
    GREEN=$(printf "\033[32m")
    YELLOW=$(printf "\033[33m")
    BLUE=$(printf "\033[34m")
    RESET=$(printf "\033[0m")
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    RESET=""
fi

get_battery_color() {
    local PERCENTAGE=$1
    if [ "$PERCENTAGE" -le 10 ]; then
        printf "%s" "$RED"
    elif [ "$PERCENTAGE" -le 25 ]; then
        printf "%s" "$YELLOW"
    else
        printf "%s" "$GREEN"
    fi
}

format_progress_bar() {
    local PERCENTAGE=$1
    local WIDTH=20
    
    # Ensure percentage doesn't exceed 100
    if [ "$PERCENTAGE" -gt 100 ]; then
        PERCENTAGE=100
    fi
    
    local FILLED=$(( $PERCENTAGE * $WIDTH / 100 ))
    local EMPTY=$(( $WIDTH - $FILLED ))
    local COLOR=$(get_battery_color "$PERCENTAGE")
    
    printf "["
    printf "%s" "$COLOR"
    for i in $(seq 1 $FILLED); do printf "#"; done
    printf "%s" "$RESET"
    if [ "$EMPTY" -gt 0 ]; then
        for i in $(seq 1 $EMPTY); do printf "-"; done
    fi
    printf "]"
}

format_time() {
    local MINUTES=$1
    
    if [ "$MINUTES" -eq 0 ]; then
        echo "--:--"
        return
    fi
    
    local HOURS=$(( MINUTES / 60 ))
    local MINS=$(( MINUTES % 60 ))
    printf "%02d:%02d" "$HOURS" "$MINS"
}


get_linux_battery_info() {
    # Find all available batteries
    BATTERIES=$(find /sys/class/power_supply -name "BAT*" -type l 2>/dev/null)
    if [ -z "$BATTERIES" ]; then
        echo "No battery found"
        exit 1
    fi
    
    for BATTERY in $BATTERIES; do
        CAPACITY=$(cat "$BATTERY/capacity" 2>/dev/null || echo "0")
        STATUS=$(cat "$BATTERY/status" 2>/dev/null || echo "Unknown")
        CURRENT=$(cat "$BATTERY/current_now" 2>/dev/null || echo "0")
        VOLTAGE=$(cat "$BATTERY/voltage_now" 2>/dev/null || echo "0")
        
        # Try energy-based files first, then charge-based files
        ENERGY_NOW=$(cat "$BATTERY/energy_now" 2>/dev/null || cat "$BATTERY/charge_now" 2>/dev/null || echo "0")
        ENERGY_FULL=$(cat "$BATTERY/energy_full" 2>/dev/null || cat "$BATTERY/charge_full" 2>/dev/null || echo "0")
        POWER=$(cat "$BATTERY/power_now" 2>/dev/null || echo "0")
        
        # If no power_now, calculate from current and voltage (µA × µV = µW)
        if [ "$POWER" -eq 0 ] && [ "$CURRENT" -gt 0 ] && [ "$VOLTAGE" -gt 0 ]; then
            POWER=$(( CURRENT * VOLTAGE / 1000000 ))
        fi
        
        # Convert power from microwatts to watts (using integer arithmetic)
        local WATTS_INT=$(( POWER / 1000000 ))
        local WATTS_DEC=$(( (POWER % 1000000) / 10000 ))
        
        # Convert current from microamps to amps
        local AMPS_INT=$(( CURRENT / 1000000 ))
        local AMPS_DEC=$(( (CURRENT % 1000000) / 10000 ))
        
        local PROGRESS=$(format_progress_bar "$CAPACITY")
        
        # Format status with TTY-safe characters and colors
        local STATUS_SYMBOL
        local STATUS_COLOR
        case "$STATUS" in
            "Charging")     
                STATUS_SYMBOL="+"
                STATUS_COLOR="$BLUE"
                ;;
            "Discharging")  
                STATUS_SYMBOL="-"
                STATUS_COLOR=$(get_battery_color "$CAPACITY")
                ;;
            "Full")         
                STATUS_SYMBOL="="
                STATUS_COLOR="$GREEN"
                ;;
            *)              
                STATUS_SYMBOL="?"
                STATUS_COLOR="$YELLOW"
                ;;
        esac
        
        local TIME_MINS=0
        
        # Check if we have energy-based files or charge-based files
        if [ -f "$BATTERY/energy_now" ]; then
            # Energy-based calculation (using power in watts)
            if [ "$POWER" -gt 1000 ]; then
                if [ "$STATUS" = "Charging" ]; then
                    # Calculate time until full (minutes)
                    local ENERGY_REMAINING=$(( ENERGY_FULL - ENERGY_NOW ))
                    if [ "$ENERGY_REMAINING" -gt 0 ]; then
                        TIME_MINS=$(( (ENERGY_REMAINING * 60) / POWER ))
                    fi
                elif [ "$STATUS" = "Discharging" ]; then
                    # Calculate time until empty (minutes)
                    if [ "$ENERGY_NOW" -gt 0 ]; then
                        TIME_MINS=$(( (ENERGY_NOW * 60) / POWER ))
                    fi
                fi
            fi
        else
            # Charge-based calculation (using current in microamps)
            if [ "$CURRENT" -gt 1000 ]; then
                if [ "$STATUS" = "Charging" ]; then
                    # Calculate time until full (minutes)
                    local CHARGE_REMAINING=$(( ENERGY_FULL - ENERGY_NOW ))
                    if [ "$CHARGE_REMAINING" -gt 0 ]; then
                        TIME_MINS=$(( (CHARGE_REMAINING * 60) / CURRENT ))
                    fi
                elif [ "$STATUS" = "Discharging" ]; then
                    # Calculate time until empty (minutes)
                    if [ "$ENERGY_NOW" -gt 0 ]; then
                        TIME_MINS=$(( (ENERGY_NOW * 60) / CURRENT ))
                    fi
                fi
            fi
        fi
        
        local TIME_FORMAT=$(format_time "$TIME_MINS")
        local CAPACITY_COLOR=$(get_battery_color "$CAPACITY")
        
        local TIME_PREFIX
        if [ "$STATUS" = "Charging" ]; then
            TIME_PREFIX="Full in"
        elif [ "$STATUS" = "Discharging" ]; then
            TIME_PREFIX="Left"
        else
            TIME_PREFIX=""
        fi
        
        # Display based on flags
        if [ "$SHOW_ALL" -eq 1 ]; then
            if [ -n "$TIME_PREFIX" ]; then
                printf "%s %s %s%3d%%%s %s%s%s %d.%02dW %d.%02dA %s %s\n" \
                    "$(basename "$BATTERY")" \
                    "$PROGRESS" \
                    "$CAPACITY_COLOR" \
                    "$CAPACITY" \
                    "$RESET" \
                    "$STATUS_COLOR" \
                    "$STATUS_SYMBOL" \
                    "$RESET" \
                    "$WATTS_INT" \
                    "$WATTS_DEC" \
                    "$AMPS_INT" \
                    "$AMPS_DEC" \
                    "$TIME_PREFIX" \
                    "$TIME_FORMAT"
            else
                printf "%s %s %s%3d%%%s %s%s%s %d.%02dW %d.%02dA\n" \
                    "$(basename "$BATTERY")" \
                    "$PROGRESS" \
                    "$CAPACITY_COLOR" \
                    "$CAPACITY" \
                    "$RESET" \
                    "$STATUS_COLOR" \
                    "$STATUS_SYMBOL" \
                    "$RESET" \
                    "$WATTS_INT" \
                    "$WATTS_DEC" \
                    "$AMPS_INT" \
                    "$AMPS_DEC"
            fi
        else
            # Individual component display
            if [ "$SHOW_PERCENTAGE" -eq 1 ]; then
                printf "%s%3d%%%s\n" "$CAPACITY_COLOR" "$CAPACITY" "$RESET"
            fi
            if [ "$SHOW_WATTS" -eq 1 ]; then
                printf "%d.%02dW\n" "$WATTS_INT" "$WATTS_DEC"
            fi
            if [ "$SHOW_AMPS" -eq 1 ]; then
                printf "%d.%02dA\n" "$AMPS_INT" "$AMPS_DEC"
            fi
            if [ "$SHOW_TIME" -eq 1 ] && [ -n "$TIME_PREFIX" ]; then
                printf "%s %s\n" "$TIME_PREFIX" "$TIME_FORMAT"
            fi
        fi
    done
}

# Main execution
case "$OS" in
    "Linux")
        get_linux_battery_info
        ;;
    *)
        echo "Unsupported operating system: $OS (Linux only)"
        exit 1
        ;;
esac
